akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/rtjvm/journal"
akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/rtjvm/snapshots"

#LocalStores
localStores {
    akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
    akka.persistence.journal.leveldb.dir = "target/localStores/journal"

    akka.persistence.journal.leveldb.compaction-intervals {
        simple-persistent-actor = 1000 # start compaction per 1000 messages for actor with id 'simple-persistent-actor'
        "*" = 5000 # everything else
    }

    akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    akka.persistence.snapshot-store.local.dir = "target/localStores/snapshots"
}

postgresDemo {
    akka.persistence.journal.plugin = "jdbc-journal"
    akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

    akka-persistence-jdbc {
        shared-databases {
            slick {
                profile = "slick.jdbc.PostgresProfile$"
                db {
                    numThreads = 10
                    driver = "org.postgresql.Driver"
                    url = "jdbc:postgresql://localhost:5432/rtjvm"
                    user = "docker"
                    password = "docker"
                }
            }
        }
    }

    jdbc-journal {
        use-shared-db = "slick"
    }

    jdbc-snapshot-store {
        use-shared-db = "slick"
    }
}



cassandraDemo {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    # default values plugin already has configured
}


customSerializerDemo {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    akka.actor {
        serializers {
            java = "akka.serialization.JavaSerializer"
            rtjvm = "part3_stores_serialization.UserRegistrationSerializer"
        }

        # bind serializer to events
        serialization-bindings {
            "part3_stores_serialization.UserRegistered" = rtjvm
            # java used by default so no need to define explicitly
        }
    }
}


eventAdapters {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
            guitar-inventory-enhancer = "part4_practices.EventAdapters$GuitarReadEventAdapter"
        }

        event-adapter-bindings {
            "part4_practices.EventAdapters$GuitarAdded" = guitar-inventory-enhancer
        }
    }
}


detachingModels {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
            detach-adapter = "part4_practices.ModelAdapter"
        }

        event-adapter-bindings {
            "part4_practices.DomainModel$CouponApplied" = detach-adapter
            "part4_practices.DataModel$WrittenCouponApplied" = detach-adapter
            "part4_practices.DataModel$WrittenCouponAppliedV2" = detach-adapter
        }
    }
}

persistenceQuery {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
            tagging = "part4_practices.PersistenceQueryDemo$MusicStoreEventAdapter"
        }

        event-adapter-bindings {
            "part4_practices.PersistenceQueryDemo$PlaylistPurchased" = tagging
        }
    }
}

